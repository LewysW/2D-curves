import java.awt.*;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.util.ArrayList;

//Class to generate bezier curve
public class Bezier {
    //Stores points of curve
    private ArrayList<Point2D> curve = new ArrayList<>();
    //Stores path of curve to be displayed
    private Path2D path = new Path2D.Double();
    //Stores randomly generated point
    private Point2D point = null;
    //Stores path of tangent
    private Path2D tangent = new Path2D.Double();
    //Stores path of perpendicular line
    private Path2D normal = new Path2D.Double();

    //Getter for random point
    public Point2D getPoint() {
        return point;
    }

    //Setter for random point
    public void setPoint(Point2D point) {
        this.point = point;
    }

    //Getter for points of curve
    public ArrayList<Point2D> getCurve() {
        return curve;
    }

    //Clears bezier curve, point and lines
    public void clear() {
        curve.clear();
        path.reset();
        tangent.reset();
        normal.reset();
    }

    //Generates the points of the bezier curve
    public void generateCurve(ArrayList<Point2D> points) {
        //Clears the curves points
        curve.clear();

        //Generates points of curve for values of u from 0 to 1
        for (double u = 0; u <= 1; u += 0.01) {
            //Adds point generated by bezier formula to curve
            curve.add(formula(points, u, points.size() - 1));
        }

        //Generates the path of the curve
        generatePath();
    }

    /**
     * Generates a point using the bezier curve formula from lectures given a list of points,
     * a value of u, and a value of n
     */
    private Point2D formula(ArrayList<Point2D> points, double u, double n) {
        Point2D point = new Point2D.Double();
        double coefficient;
        double x = 0;
        double y = 0;

        //Sum all points for i to n
        for (int i = 0; i <= n; i++) {
            //Coefficient of formula
            coefficient = binomialCoefficient(n, i) * Math.pow(u, i) * Math.pow(1 - u, n - i);
            //Generate x and y points using coefficient and x and y of current point
            x += coefficient * points.get(i).getX();
            y += coefficient * points.get(i).getY();
        }

        //Set the location of the point to the final x and y value
        point.setLocation(x, y);

        return point;
    }

    /**
     * Gets derivative (as a vector) of bezier curve given a value u using the derivative formula
     */
    public Point2D derivative(double u) {
        Point2D point = new Point2D.Double();
        double coefficient;
        double x = 0;
        double y = 0;
        double n = curve.size();

        //Sum all coordinates from 0 to n - 1
        for (int i = 0; i < (n - 1); i++) {
            //Generate coefficient
            coefficient = n * binomialCoefficient(n - 1, i) * Math.pow(u, i) * Math.pow(1 - u, n - 1 - i);
            //Generates x and y of vector by subtracting x and y of value (i-1) and value(i) and multiplying by coefficient
            x += coefficient * (curve.get(i + 1).getX() - curve.get(i).getX());
            y += coefficient * (curve.get(i + 1).getY() - curve.get(i).getY());
        }

        //Set final x and y value of derivative vector
        point.setLocation(x, y);

        return point;
    }

    //Generates tangent to bezier curve given vector from derivative function
    public void generateTangent(Point2D vector) {
        Point2D prev = new Point2D.Double();
        Point2D next = new Point2D.Double();

        //Generates two more points on tangent by subtracting vector from random point
        prev.setLocation(point.getX() - vector.getX(), point.getY() - vector.getY());
        next.setLocation(point.getX() + vector.getX(), point.getY() + vector.getY());

        //Moves tangent path to previous point and draws through random point and next point
        tangent.moveTo(prev.getX(), prev.getY());
        tangent.lineTo(point.getX(), point.getY());
        tangent.lineTo(next.getX(), next.getY());
    }

    //Reset tangent path
    public void resetTangent() {
        tangent.reset();
    }

    //Getter for tangent
    public Path2D getTangent() {
        return tangent;
    }

    //Generates perpendicular line to tangent
    public void generateNormal(Point2D vector) {
        //Rotates vector 90 degrees
        vector.setLocation(-1 * vector.getY(), vector.getX());

        Point2D prev = new Point2D.Double();
        Point2D next = new Point2D.Double();

        //Generates two more points on perpendicular line
        prev.setLocation(point.getX() - vector.getX(), point.getY() - vector.getY());
        next.setLocation(point.getX() + vector.getX(), point.getY() + vector.getY());

        //Moves perpendicular line to previous point and draws through random point and next point
        normal.moveTo(prev.getX(), prev.getY());
        normal.lineTo(point.getX(), point.getY());
        normal.lineTo(next.getX(), next.getY());
    }

    //Resets perpendicular line
    public void resetNormal() {
        normal.reset();
    }

    //Getter for perpendicular line
    public Path2D getNormal() {
        return normal;
    }

    //Binomial coefficient function
    private double binomialCoefficient(double n, double i) {
        return (factorial(n)/(factorial(i)* factorial(n - i)));
    }

    //Factorial function used by binomial coefficient
    private double factorial(double i) {
        if (i <= 1) {
            return 1;
        } else {
            return i * (factorial(i - 1));
        }
    }

    //Generates path through list of points to be displayed
    public void generatePath() {
        for (int i = 0; i < curve.size(); i++) {
            Point2D point = getCurve().get(i);

            if (i == 0) {
                //Move to first point in list
                path.moveTo(point.getX(), point.getY());
            }

            //Connects path to subsequent points
            path.lineTo(point.getX(), point.getY());
        }
    }

    //Gets path of bezier curve to be drawn
    public Path2D getPath() {
        return path;
    }
}
